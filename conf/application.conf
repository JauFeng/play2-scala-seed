# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# Base practices:
#   1. Passing secret as a system property.For example:
#       /path/to/yourapp/bin/yourapp -Dplay.crypto.secret="QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241AB`R5W:1uDFN];Ik@n"
#   2. Environment variables:
#       'APPLICATION_SECRET'
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "W@hgzzFkAlFlxH1I^t2KgAxtE^9CZFkdww7X68LAEaStTmW0fGmy_xg1na5W^W>E"
play.crypto.secret = ${?APPLICATION_SECRET}
#

# The application languages
# ~~~~~
play.i18n.langs = ["en", "zh"]
#

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes
#

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
slick.dbs.default.driver = "slick.driver.H2Driver$"
slick.dbs.default.db.driver = "org.h2.Driver"
slick.dbs.default.db.url = "jdbc:h2:mem:play"
#

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false
# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false
play.evolutions.db.default.autoApply = true
#

# Akka logging configuration
# ~~~~~
# this can override akka default logging
# and using your logback logging.
#
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
}
#

# Http request handler
# ~~~~~
# If you didn't configure Play's HttpRequestHandler, that means use the `GlobalSetting` method - it hava a performance impact.
#
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"
#

# Error Handler
# ~~~~~
# Default: root package.
# Configure different error handlers for different environments.
#
play.http.errorHandler = "filters.MyErrorHandler"
#

# Play filter
# ~~~~~
# Setting the filters package.(default: root package)
# A small number of tuning config options can be configured from `application.conf`,
# the available config options in `filters-helpers_2.11-2.4.1.jar!\reference.conf`.
# See more: https://www.playframework.com/documentation/2.4.x/resources/confs/filters-helpers/reference.conf
#
play.http.filters = "filters.MyFilters"
#
# GzipFilter
# ~~~~~
#
# SecurityFilter
# ~~~~~
# The X-Frame-Options header. If null, the header is not set.
play.filters.headers.frameOptions = "SAMEORIGIN"
# The X-XSS-Protection header. If null, the header is not set.
play.filters.headers.xssProtection = "1; mode=block"
# The X-Content-Type-Options header. If null, the header is not set.
play.filters.headers.contentTypeOptions = "nosniff"
# The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
play.filters.headers.permittedCrossDomainPolicies = "master-only"
# The Content-Security-Policy header. If null, the header is not set.
# play.filters.headers.contentSecurityPolicy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'"
play.filters.headers.contentSecurityPolicy = null
#
# CORSFilter
# ~~~~~
#
# CSRFFilter(Not be appropriate)
# ~~~~~
#

# Play cache
#
# See more: https://www.playframework.com/documentation/2.4.x/ScalaCache
# ~~~~
play.cache.bindCaches = ["db-cache", "user-cache", "session-cache", "html-cache"]
#

# Play WS
#
# default settinf in `com.typesafe.play\play-ws_2.11\jars\play-ws_2.11-2.4.2.jar!\reference.conf`.
# See more: https://www.playframework.com/documentation/2.4.x/ScalaWS
# ~~~~~
#
play.ws.followRedirects = true
play.ws.useProxyProperties = true
play.ws.useragent = null
play.ws.compressionEnabled = false

play.ws.timeout.connection = 2 minutes
play.ws.timeout.idle = 2 minutes
play.ws.timeout.request = 2 minutes
#

# Play mailer
#
#
#
play.mailer {
  host = smtp.yeah.net
  port = 25
  ssl = no
  tls = no
  user = "crow1984"
  password = "S1c9a8l4a"
  // Defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger
  debug = no
  // Defaults to no, will only log all the email properties instead of sending an email
  mock = true
  // Set the socket I/O timeout value in milliseconds. Default is 60 second timeout.
  timeout = 60 s
  // Set the socket connection timeout value in milliseconds. Default is a 60 second timeout.
  connectiontimeout = 60s
}
